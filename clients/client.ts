/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"MachineContract","structs":{},"methods":[{"name":"createApplication","args":[{"type":"account","name":"ownerAddress"},{"type":"uint64","name":"fixedPricing"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"pay","args":[{"type":"pay","name":"payTxn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"changePrice","args":[{"type":"uint64","name":"pricing"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"withdraw","args":[{"type":"uint64","name":"amount"},{"type":"account","name":"walletAddress"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"withdrawAll","args":[{"type":"uint64","name":"mount"},{"type":"account","name":"walletAddress"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":2,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"MANAGER_ADDRESS":{"keyType":"AVMString","valueType":"address","key":"TUFOQUdFUl9BRERSRVNT"},"transactionSales":{"keyType":"AVMString","valueType":"AVMUint64","key":"dHJhbnNhY3Rpb25TYWxlcw=="},"fixedPricing":{"keyType":"AVMString","valueType":"AVMUint64","key":"Zml4ZWRQcmljaW5n"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[249],"errorMessage":"Incorrect payment amount"},{"pc":[89,111,133,149,171],"errorMessage":"OnCompletion is not NoOp"},{"pc":[175],"errorMessage":"can only call when creating"},{"pc":[92,114,136,152],"errorMessage":"can only call when not creating"},{"pc":[228,253],"errorMessage":"check GlobalState exists"},{"pc":[241],"errorMessage":"payment must be to app"},{"pc":[162],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAQAmAhB0cmFuc2FjdGlvblNhbGVzDGZpeGVkUHJpY2luZzEbQQAqggUEOwFmXgRraAMYBBk5bEoEGVHkTwTJz+3yNhoAjgUAVAA+AC4AGAACI0MxGRREMRhENhoBFzYaAhfAHIgA6CJDMRkURDEYRDYaARc2GgIXwByIAL4iQzEZFEQxGEQ2GgEXiACmIkMxGRREMRhEMRYiCUk4ECISRIgAOCJDMRkURDEYFEQ2GgEXwBw2GgIXiAACIkOKAgAoI2eAD01BTkFHRVJfQUREUkVTU4v+ZymL/2eJigEAIyllRIHAhD0Li/84BzIKEkSL/zgISwESRCMoZUQiCChMZxaADlBheW1lbnQgRG9uZTogTFCAFyBtaWNyb0FsZ29zIHRpbWVTdGFtcDogUDIHFlCwiYoBACmL/2eJigIAsYv+sgiL/7IHIrIQI7IBs4mKAgCxi/+yCSOyCIv/sgcishAjsgGziQ==","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the MachineContract contract
 */
export type MachineContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(account,uint64)void': {
      ownerAddress: Uint8Array | string
      fixedPricing: bigint | number
    }
    'pay(pay)void': {
      payTxn: AppMethodCallTransactionArgument
    }
    'changePrice(uint64)void': {
      pricing: bigint | number
    }
    'withdraw(uint64,account)void': {
      amount: bigint | number
      walletAddress: Uint8Array | string
    }
    'withdrawAll(uint64,account)void': {
      mount: bigint | number
      walletAddress: Uint8Array | string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(account,uint64)void': [ownerAddress: Uint8Array | string, fixedPricing: bigint | number]
    'pay(pay)void': [payTxn: AppMethodCallTransactionArgument]
    'changePrice(uint64)void': [pricing: bigint | number]
    'withdraw(uint64,account)void': [amount: bigint | number, walletAddress: Uint8Array | string]
    'withdrawAll(uint64,account)void': [mount: bigint | number, walletAddress: Uint8Array | string]
  }
}

/**
 * The return type for each method
 */
export type MachineContractReturns = {
  'createApplication(account,uint64)void': void
  'pay(pay)void': void
  'changePrice(uint64)void': void
  'withdraw(uint64,account)void': void
  'withdrawAll(uint64,account)void': void
}

/**
 * Defines the types of available calls and state of the MachineContract smart contract.
 */
export type MachineContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(account,uint64)void' | 'createApplication', {
      argsObj: MachineContractArgs['obj']['createApplication(account,uint64)void']
      argsTuple: MachineContractArgs['tuple']['createApplication(account,uint64)void']
      returns: MachineContractReturns['createApplication(account,uint64)void']
    }>
    & Record<'pay(pay)void' | 'pay', {
      argsObj: MachineContractArgs['obj']['pay(pay)void']
      argsTuple: MachineContractArgs['tuple']['pay(pay)void']
      returns: MachineContractReturns['pay(pay)void']
    }>
    & Record<'changePrice(uint64)void' | 'changePrice', {
      argsObj: MachineContractArgs['obj']['changePrice(uint64)void']
      argsTuple: MachineContractArgs['tuple']['changePrice(uint64)void']
      returns: MachineContractReturns['changePrice(uint64)void']
    }>
    & Record<'withdraw(uint64,account)void' | 'withdraw', {
      argsObj: MachineContractArgs['obj']['withdraw(uint64,account)void']
      argsTuple: MachineContractArgs['tuple']['withdraw(uint64,account)void']
      returns: MachineContractReturns['withdraw(uint64,account)void']
    }>
    & Record<'withdrawAll(uint64,account)void' | 'withdrawAll', {
      argsObj: MachineContractArgs['obj']['withdrawAll(uint64,account)void']
      argsTuple: MachineContractArgs['tuple']['withdrawAll(uint64,account)void']
      returns: MachineContractReturns['withdrawAll(uint64,account)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        managerAddress: string
        transactionSales: bigint
        fixedPricing: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type MachineContractSignatures = keyof MachineContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type MachineContractNonVoidMethodSignatures = keyof MachineContractTypes['methods'] extends infer T ? T extends keyof MachineContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the MachineContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends MachineContractSignatures> = MachineContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the MachineContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MachineContractSignatures> = MachineContractTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = MachineContractTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type MachineContractCreateCallParams =
  | Expand<CallParams<MachineContractArgs['obj']['createApplication(account,uint64)void'] | MachineContractArgs['tuple']['createApplication(account,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<MachineContractArgs['obj']['createApplication(account,uint64)void'] | MachineContractArgs['tuple']['createApplication(account,uint64)void']> & {method: 'createApplication(account,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type MachineContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: MachineContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the MachineContract smart contract
 */
export abstract class MachineContractParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends MachineContractCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(account,uint64)void':
            return MachineContractParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the MachineContract smart contract using the createApplication(account,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<MachineContractArgs['obj']['createApplication(account,uint64)void'] | MachineContractArgs['tuple']['createApplication(account,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(account,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.ownerAddress, params.args.fixedPricing],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the pay(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static pay(params: CallParams<MachineContractArgs['obj']['pay(pay)void'] | MachineContractArgs['tuple']['pay(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'pay(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payTxn],
    }
  }
  /**
   * Constructs a no op call for the changePrice(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static changePrice(params: CallParams<MachineContractArgs['obj']['changePrice(uint64)void'] | MachineContractArgs['tuple']['changePrice(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'changePrice(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.pricing],
    }
  }
  /**
   * Constructs a no op call for the withdraw(uint64,account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdraw(params: CallParams<MachineContractArgs['obj']['withdraw(uint64,account)void'] | MachineContractArgs['tuple']['withdraw(uint64,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw(uint64,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount, params.args.walletAddress],
    }
  }
  /**
   * Constructs a no op call for the withdrawAll(uint64,account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawAll(params: CallParams<MachineContractArgs['obj']['withdrawAll(uint64,account)void'] | MachineContractArgs['tuple']['withdrawAll(uint64,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawAll(uint64,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mount, params.args.walletAddress],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the MachineContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class MachineContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `MachineContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new MachineContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new MachineContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the MachineContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: MachineContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? MachineContractParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (MachineContractCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new MachineContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the MachineContract smart contract using the createApplication(account,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<MachineContractArgs['obj']['createApplication(account,uint64)void'] | MachineContractArgs['tuple']['createApplication(account,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(MachineContractParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the MachineContract smart contract using the createApplication(account,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<MachineContractArgs['obj']['createApplication(account,uint64)void'] | MachineContractArgs['tuple']['createApplication(account,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(MachineContractParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the MachineContract smart contract using an ABI method call using the createApplication(account,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<MachineContractArgs['obj']['createApplication(account,uint64)void'] | MachineContractArgs['tuple']['createApplication(account,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(MachineContractParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | MachineContractReturns['createApplication(account,uint64)void']) }, appClient: new MachineContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the MachineContract smart contract
 */
export class MachineContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `MachineContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the MachineContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `MachineContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends MachineContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `MachineContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<MachineContractClient> {
    return new MachineContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `MachineContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<MachineContractClient> {
    return new MachineContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the MachineContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the MachineContract smart contract using the `pay(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    pay: (params: CallParams<MachineContractArgs['obj']['pay(pay)void'] | MachineContractArgs['tuple']['pay(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MachineContractParamsFactory.pay(params))
    },

    /**
     * Makes a call to the MachineContract smart contract using the `changePrice(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    changePrice: (params: CallParams<MachineContractArgs['obj']['changePrice(uint64)void'] | MachineContractArgs['tuple']['changePrice(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MachineContractParamsFactory.changePrice(params))
    },

    /**
     * Makes a call to the MachineContract smart contract using the `withdraw(uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdraw: (params: CallParams<MachineContractArgs['obj']['withdraw(uint64,account)void'] | MachineContractArgs['tuple']['withdraw(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MachineContractParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the MachineContract smart contract using the `withdrawAll(uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawAll: (params: CallParams<MachineContractArgs['obj']['withdrawAll(uint64,account)void'] | MachineContractArgs['tuple']['withdrawAll(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MachineContractParamsFactory.withdrawAll(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the MachineContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the MachineContract smart contract using the `pay(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    pay: (params: CallParams<MachineContractArgs['obj']['pay(pay)void'] | MachineContractArgs['tuple']['pay(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MachineContractParamsFactory.pay(params))
    },

    /**
     * Makes a call to the MachineContract smart contract using the `changePrice(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    changePrice: (params: CallParams<MachineContractArgs['obj']['changePrice(uint64)void'] | MachineContractArgs['tuple']['changePrice(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MachineContractParamsFactory.changePrice(params))
    },

    /**
     * Makes a call to the MachineContract smart contract using the `withdraw(uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdraw: (params: CallParams<MachineContractArgs['obj']['withdraw(uint64,account)void'] | MachineContractArgs['tuple']['withdraw(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MachineContractParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the MachineContract smart contract using the `withdrawAll(uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawAll: (params: CallParams<MachineContractArgs['obj']['withdrawAll(uint64,account)void'] | MachineContractArgs['tuple']['withdrawAll(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MachineContractParamsFactory.withdrawAll(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the MachineContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the MachineContract smart contract using the `pay(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    pay: async (params: CallParams<MachineContractArgs['obj']['pay(pay)void'] | MachineContractArgs['tuple']['pay(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MachineContractParamsFactory.pay(params))
      return {...result, return: result.return as unknown as (undefined | MachineContractReturns['pay(pay)void'])}
    },

    /**
     * Makes a call to the MachineContract smart contract using the `changePrice(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    changePrice: async (params: CallParams<MachineContractArgs['obj']['changePrice(uint64)void'] | MachineContractArgs['tuple']['changePrice(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MachineContractParamsFactory.changePrice(params))
      return {...result, return: result.return as unknown as (undefined | MachineContractReturns['changePrice(uint64)void'])}
    },

    /**
     * Makes a call to the MachineContract smart contract using the `withdraw(uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdraw: async (params: CallParams<MachineContractArgs['obj']['withdraw(uint64,account)void'] | MachineContractArgs['tuple']['withdraw(uint64,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MachineContractParamsFactory.withdraw(params))
      return {...result, return: result.return as unknown as (undefined | MachineContractReturns['withdraw(uint64,account)void'])}
    },

    /**
     * Makes a call to the MachineContract smart contract using the `withdrawAll(uint64,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawAll: async (params: CallParams<MachineContractArgs['obj']['withdrawAll(uint64,account)void'] | MachineContractArgs['tuple']['withdrawAll(uint64,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MachineContractParamsFactory.withdrawAll(params))
      return {...result, return: result.return as unknown as (undefined | MachineContractReturns['withdrawAll(uint64,account)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new MachineContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current MachineContract app
   */
  state = {
    /**
     * Methods to access global state for the current MachineContract app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          managerAddress: result.MANAGER_ADDRESS,
          transactionSales: result.transactionSales,
          fixedPricing: result.fixedPricing,
        }
      },
      /**
       * Get the current value of the MANAGER_ADDRESS key in global state
       */
      managerAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("MANAGER_ADDRESS")) as string | undefined },
      /**
       * Get the current value of the transactionSales key in global state
       */
      transactionSales: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("transactionSales")) as bigint | undefined },
      /**
       * Get the current value of the fixedPricing key in global state
       */
      fixedPricing: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("fixedPricing")) as bigint | undefined },
    },
  }

  public newGroup(): MachineContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a pay(pay)void method call against the MachineContract contract
       */
      pay(params: CallParams<MachineContractArgs['obj']['pay(pay)void'] | MachineContractArgs['tuple']['pay(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.pay(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a changePrice(uint64)void method call against the MachineContract contract
       */
      changePrice(params: CallParams<MachineContractArgs['obj']['changePrice(uint64)void'] | MachineContractArgs['tuple']['changePrice(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.changePrice(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdraw(uint64,account)void method call against the MachineContract contract
       */
      withdraw(params: CallParams<MachineContractArgs['obj']['withdraw(uint64,account)void'] | MachineContractArgs['tuple']['withdraw(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdraw(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdrawAll(uint64,account)void method call against the MachineContract contract
       */
      withdrawAll(params: CallParams<MachineContractArgs['obj']['withdrawAll(uint64,account)void'] | MachineContractArgs['tuple']['withdrawAll(uint64,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawAll(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the MachineContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as MachineContractComposer
  }
}
export type MachineContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the pay(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  pay(params?: CallParams<MachineContractArgs['obj']['pay(pay)void'] | MachineContractArgs['tuple']['pay(pay)void']>): MachineContractComposer<[...TReturns, MachineContractReturns['pay(pay)void'] | undefined]>

  /**
   * Calls the changePrice(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changePrice(params?: CallParams<MachineContractArgs['obj']['changePrice(uint64)void'] | MachineContractArgs['tuple']['changePrice(uint64)void']>): MachineContractComposer<[...TReturns, MachineContractReturns['changePrice(uint64)void'] | undefined]>

  /**
   * Calls the withdraw(uint64,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(params?: CallParams<MachineContractArgs['obj']['withdraw(uint64,account)void'] | MachineContractArgs['tuple']['withdraw(uint64,account)void']>): MachineContractComposer<[...TReturns, MachineContractReturns['withdraw(uint64,account)void'] | undefined]>

  /**
   * Calls the withdrawAll(uint64,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawAll(params?: CallParams<MachineContractArgs['obj']['withdrawAll(uint64,account)void'] | MachineContractArgs['tuple']['withdrawAll(uint64,account)void']>): MachineContractComposer<[...TReturns, MachineContractReturns['withdrawAll(uint64,account)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the MachineContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): MachineContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): MachineContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<MachineContractComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<MachineContractComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<MachineContractComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<MachineContractComposerResults<TReturns>>
}
export type MachineContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

